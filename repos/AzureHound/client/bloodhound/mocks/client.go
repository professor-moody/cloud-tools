// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bloodhoundad/azurehound/v2/client/bloodhound (interfaces: BloodHoundClient)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/client.go -package=mocks . BloodHoundClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	models "github.com/bloodhoundad/azurehound/v2/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBloodHoundClient is a mock of BloodHoundClient interface.
type MockBloodHoundClient struct {
	ctrl     *gomock.Controller
	recorder *MockBloodHoundClientMockRecorder
	isgomock struct{}
}

// MockBloodHoundClientMockRecorder is the mock recorder for MockBloodHoundClient.
type MockBloodHoundClientMockRecorder struct {
	mock *MockBloodHoundClient
}

// NewMockBloodHoundClient creates a new mock instance.
func NewMockBloodHoundClient(ctrl *gomock.Controller) *MockBloodHoundClient {
	mock := &MockBloodHoundClient{ctrl: ctrl}
	mock.recorder = &MockBloodHoundClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBloodHoundClient) EXPECT() *MockBloodHoundClientMockRecorder {
	return m.recorder
}

// Checkin mocks base method.
func (m *MockBloodHoundClient) Checkin(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkin", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkin indicates an expected call of Checkin.
func (mr *MockBloodHoundClientMockRecorder) Checkin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkin", reflect.TypeOf((*MockBloodHoundClient)(nil).Checkin), ctx)
}

// CloseIdleConnections mocks base method.
func (m *MockBloodHoundClient) CloseIdleConnections() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseIdleConnections")
}

// CloseIdleConnections indicates an expected call of CloseIdleConnections.
func (mr *MockBloodHoundClientMockRecorder) CloseIdleConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIdleConnections", reflect.TypeOf((*MockBloodHoundClient)(nil).CloseIdleConnections))
}

// EndJob mocks base method.
func (m *MockBloodHoundClient) EndJob(ctx context.Context, status models.JobStatus, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndJob", ctx, status, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndJob indicates an expected call of EndJob.
func (mr *MockBloodHoundClientMockRecorder) EndJob(ctx, status, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndJob", reflect.TypeOf((*MockBloodHoundClient)(nil).EndJob), ctx, status, message)
}

// EndOrphanedJob mocks base method.
func (m *MockBloodHoundClient) EndOrphanedJob(ctx context.Context, updatedClient *models.UpdateClientResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndOrphanedJob", ctx, updatedClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndOrphanedJob indicates an expected call of EndOrphanedJob.
func (mr *MockBloodHoundClientMockRecorder) EndOrphanedJob(ctx, updatedClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndOrphanedJob", reflect.TypeOf((*MockBloodHoundClient)(nil).EndOrphanedJob), ctx, updatedClient)
}

// GetAvailableJobs mocks base method.
func (m *MockBloodHoundClient) GetAvailableJobs(ctx context.Context) ([]models.ClientJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableJobs", ctx)
	ret0, _ := ret[0].([]models.ClientJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableJobs indicates an expected call of GetAvailableJobs.
func (mr *MockBloodHoundClientMockRecorder) GetAvailableJobs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableJobs", reflect.TypeOf((*MockBloodHoundClient)(nil).GetAvailableJobs), ctx)
}

// Ingest mocks base method.
func (m *MockBloodHoundClient) Ingest(ctx context.Context, in <-chan []any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ingest", ctx, in)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ingest indicates an expected call of Ingest.
func (mr *MockBloodHoundClientMockRecorder) Ingest(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ingest", reflect.TypeOf((*MockBloodHoundClient)(nil).Ingest), ctx, in)
}

// SendRequest mocks base method.
func (m *MockBloodHoundClient) SendRequest(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockBloodHoundClientMockRecorder) SendRequest(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockBloodHoundClient)(nil).SendRequest), req)
}

// StartJob mocks base method.
func (m *MockBloodHoundClient) StartJob(ctx context.Context, jobId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJob", ctx, jobId)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartJob indicates an expected call of StartJob.
func (mr *MockBloodHoundClientMockRecorder) StartJob(ctx, jobId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJob", reflect.TypeOf((*MockBloodHoundClient)(nil).StartJob), ctx, jobId)
}

// UpdateClient mocks base method.
func (m *MockBloodHoundClient) UpdateClient(ctx context.Context) (*models.UpdateClientResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", ctx)
	ret0, _ := ret[0].(*models.UpdateClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockBloodHoundClientMockRecorder) UpdateClient(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockBloodHoundClient)(nil).UpdateClient), ctx)
}
