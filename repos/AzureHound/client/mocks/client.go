// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bloodhoundad/azurehound/v2/client (interfaces: AzureClient)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/client.go -package=mocks . AzureClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	client "github.com/bloodhoundad/azurehound/v2/client"
	query "github.com/bloodhoundad/azurehound/v2/client/query"
	azure "github.com/bloodhoundad/azurehound/v2/models/azure"
	gomock "go.uber.org/mock/gomock"
)

// MockAzureClient is a mock of AzureClient interface.
type MockAzureClient struct {
	ctrl     *gomock.Controller
	recorder *MockAzureClientMockRecorder
	isgomock struct{}
}

// MockAzureClientMockRecorder is the mock recorder for MockAzureClient.
type MockAzureClientMockRecorder struct {
	mock *MockAzureClient
}

// NewMockAzureClient creates a new mock instance.
func NewMockAzureClient(ctrl *gomock.Controller) *MockAzureClient {
	mock := &MockAzureClient{ctrl: ctrl}
	mock.recorder = &MockAzureClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzureClient) EXPECT() *MockAzureClientMockRecorder {
	return m.recorder
}

// CloseIdleConnections mocks base method.
func (m *MockAzureClient) CloseIdleConnections() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseIdleConnections")
}

// CloseIdleConnections indicates an expected call of CloseIdleConnections.
func (mr *MockAzureClientMockRecorder) CloseIdleConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIdleConnections", reflect.TypeOf((*MockAzureClient)(nil).CloseIdleConnections))
}

// GetAzureADOrganization mocks base method.
func (m *MockAzureClient) GetAzureADOrganization(ctx context.Context, selectCols []string) (*azure.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureADOrganization", ctx, selectCols)
	ret0, _ := ret[0].(*azure.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureADOrganization indicates an expected call of GetAzureADOrganization.
func (mr *MockAzureClientMockRecorder) GetAzureADOrganization(ctx, selectCols any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureADOrganization", reflect.TypeOf((*MockAzureClient)(nil).GetAzureADOrganization), ctx, selectCols)
}

// GetAzureADTenants mocks base method.
func (m *MockAzureClient) GetAzureADTenants(ctx context.Context, includeAllTenantCategories bool) (azure.TenantList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureADTenants", ctx, includeAllTenantCategories)
	ret0, _ := ret[0].(azure.TenantList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureADTenants indicates an expected call of GetAzureADTenants.
func (mr *MockAzureClientMockRecorder) GetAzureADTenants(ctx, includeAllTenantCategories any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureADTenants", reflect.TypeOf((*MockAzureClient)(nil).GetAzureADTenants), ctx, includeAllTenantCategories)
}

// ListAzureADAppOwners mocks base method.
func (m *MockAzureClient) ListAzureADAppOwners(ctx context.Context, objectId string, params query.GraphParams) <-chan client.AzureResult[json.RawMessage] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADAppOwners", ctx, objectId, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[json.RawMessage])
	return ret0
}

// ListAzureADAppOwners indicates an expected call of ListAzureADAppOwners.
func (mr *MockAzureClientMockRecorder) ListAzureADAppOwners(ctx, objectId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADAppOwners", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADAppOwners), ctx, objectId, params)
}

// ListAzureADAppRoleAssignments mocks base method.
func (m *MockAzureClient) ListAzureADAppRoleAssignments(ctx context.Context, servicePrincipalId string, params query.GraphParams) <-chan client.AzureResult[azure.AppRoleAssignment] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADAppRoleAssignments", ctx, servicePrincipalId, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.AppRoleAssignment])
	return ret0
}

// ListAzureADAppRoleAssignments indicates an expected call of ListAzureADAppRoleAssignments.
func (mr *MockAzureClientMockRecorder) ListAzureADAppRoleAssignments(ctx, servicePrincipalId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADAppRoleAssignments", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADAppRoleAssignments), ctx, servicePrincipalId, params)
}

// ListAzureADApps mocks base method.
func (m *MockAzureClient) ListAzureADApps(ctx context.Context, params query.GraphParams) <-chan client.AzureResult[azure.Application] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADApps", ctx, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.Application])
	return ret0
}

// ListAzureADApps indicates an expected call of ListAzureADApps.
func (mr *MockAzureClientMockRecorder) ListAzureADApps(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADApps", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADApps), ctx, params)
}

// ListAzureADGroupMembers mocks base method.
func (m *MockAzureClient) ListAzureADGroupMembers(ctx context.Context, objectId string, params query.GraphParams) <-chan client.AzureResult[json.RawMessage] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADGroupMembers", ctx, objectId, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[json.RawMessage])
	return ret0
}

// ListAzureADGroupMembers indicates an expected call of ListAzureADGroupMembers.
func (mr *MockAzureClientMockRecorder) ListAzureADGroupMembers(ctx, objectId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADGroupMembers", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADGroupMembers), ctx, objectId, params)
}

// ListAzureADGroupOwners mocks base method.
func (m *MockAzureClient) ListAzureADGroupOwners(ctx context.Context, objectId string, params query.GraphParams) <-chan client.AzureResult[json.RawMessage] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADGroupOwners", ctx, objectId, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[json.RawMessage])
	return ret0
}

// ListAzureADGroupOwners indicates an expected call of ListAzureADGroupOwners.
func (mr *MockAzureClientMockRecorder) ListAzureADGroupOwners(ctx, objectId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADGroupOwners", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADGroupOwners), ctx, objectId, params)
}

// ListAzureADGroups mocks base method.
func (m *MockAzureClient) ListAzureADGroups(ctx context.Context, params query.GraphParams) <-chan client.AzureResult[azure.Group] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADGroups", ctx, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.Group])
	return ret0
}

// ListAzureADGroups indicates an expected call of ListAzureADGroups.
func (mr *MockAzureClientMockRecorder) ListAzureADGroups(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADGroups", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADGroups), ctx, params)
}

// ListAzureADRoleAssignments mocks base method.
func (m *MockAzureClient) ListAzureADRoleAssignments(ctx context.Context, params query.GraphParams) <-chan client.AzureResult[azure.UnifiedRoleAssignment] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADRoleAssignments", ctx, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.UnifiedRoleAssignment])
	return ret0
}

// ListAzureADRoleAssignments indicates an expected call of ListAzureADRoleAssignments.
func (mr *MockAzureClientMockRecorder) ListAzureADRoleAssignments(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADRoleAssignments", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADRoleAssignments), ctx, params)
}

// ListAzureADRoles mocks base method.
func (m *MockAzureClient) ListAzureADRoles(ctx context.Context, params query.GraphParams) <-chan client.AzureResult[azure.Role] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADRoles", ctx, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.Role])
	return ret0
}

// ListAzureADRoles indicates an expected call of ListAzureADRoles.
func (mr *MockAzureClientMockRecorder) ListAzureADRoles(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADRoles", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADRoles), ctx, params)
}

// ListAzureADServicePrincipalOwners mocks base method.
func (m *MockAzureClient) ListAzureADServicePrincipalOwners(ctx context.Context, objectId string, params query.GraphParams) <-chan client.AzureResult[json.RawMessage] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADServicePrincipalOwners", ctx, objectId, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[json.RawMessage])
	return ret0
}

// ListAzureADServicePrincipalOwners indicates an expected call of ListAzureADServicePrincipalOwners.
func (mr *MockAzureClientMockRecorder) ListAzureADServicePrincipalOwners(ctx, objectId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADServicePrincipalOwners", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADServicePrincipalOwners), ctx, objectId, params)
}

// ListAzureADServicePrincipals mocks base method.
func (m *MockAzureClient) ListAzureADServicePrincipals(ctx context.Context, params query.GraphParams) <-chan client.AzureResult[azure.ServicePrincipal] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADServicePrincipals", ctx, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.ServicePrincipal])
	return ret0
}

// ListAzureADServicePrincipals indicates an expected call of ListAzureADServicePrincipals.
func (mr *MockAzureClientMockRecorder) ListAzureADServicePrincipals(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADServicePrincipals", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADServicePrincipals), ctx, params)
}

// ListAzureADTenants mocks base method.
func (m *MockAzureClient) ListAzureADTenants(ctx context.Context, includeAllTenantCategories bool) <-chan client.AzureResult[azure.Tenant] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADTenants", ctx, includeAllTenantCategories)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.Tenant])
	return ret0
}

// ListAzureADTenants indicates an expected call of ListAzureADTenants.
func (mr *MockAzureClientMockRecorder) ListAzureADTenants(ctx, includeAllTenantCategories any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADTenants", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADTenants), ctx, includeAllTenantCategories)
}

// ListAzureADUsers mocks base method.
func (m *MockAzureClient) ListAzureADUsers(ctx context.Context, params query.GraphParams) <-chan client.AzureResult[azure.User] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADUsers", ctx, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.User])
	return ret0
}

// ListAzureADUsers indicates an expected call of ListAzureADUsers.
func (mr *MockAzureClientMockRecorder) ListAzureADUsers(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADUsers", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADUsers), ctx, params)
}

// ListAzureAutomationAccounts mocks base method.
func (m *MockAzureClient) ListAzureAutomationAccounts(ctx context.Context, subscriptionId string) <-chan client.AzureResult[azure.AutomationAccount] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureAutomationAccounts", ctx, subscriptionId)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.AutomationAccount])
	return ret0
}

// ListAzureAutomationAccounts indicates an expected call of ListAzureAutomationAccounts.
func (mr *MockAzureClientMockRecorder) ListAzureAutomationAccounts(ctx, subscriptionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureAutomationAccounts", reflect.TypeOf((*MockAzureClient)(nil).ListAzureAutomationAccounts), ctx, subscriptionId)
}

// ListAzureContainerRegistries mocks base method.
func (m *MockAzureClient) ListAzureContainerRegistries(ctx context.Context, subscriptionId string) <-chan client.AzureResult[azure.ContainerRegistry] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureContainerRegistries", ctx, subscriptionId)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.ContainerRegistry])
	return ret0
}

// ListAzureContainerRegistries indicates an expected call of ListAzureContainerRegistries.
func (mr *MockAzureClientMockRecorder) ListAzureContainerRegistries(ctx, subscriptionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureContainerRegistries", reflect.TypeOf((*MockAzureClient)(nil).ListAzureContainerRegistries), ctx, subscriptionId)
}

// ListAzureDeviceRegisteredOwners mocks base method.
func (m *MockAzureClient) ListAzureDeviceRegisteredOwners(ctx context.Context, objectId string, params query.GraphParams) <-chan client.AzureResult[json.RawMessage] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureDeviceRegisteredOwners", ctx, objectId, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[json.RawMessage])
	return ret0
}

// ListAzureDeviceRegisteredOwners indicates an expected call of ListAzureDeviceRegisteredOwners.
func (mr *MockAzureClientMockRecorder) ListAzureDeviceRegisteredOwners(ctx, objectId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureDeviceRegisteredOwners", reflect.TypeOf((*MockAzureClient)(nil).ListAzureDeviceRegisteredOwners), ctx, objectId, params)
}

// ListAzureDevices mocks base method.
func (m *MockAzureClient) ListAzureDevices(ctx context.Context, params query.GraphParams) <-chan client.AzureResult[azure.Device] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureDevices", ctx, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.Device])
	return ret0
}

// ListAzureDevices indicates an expected call of ListAzureDevices.
func (mr *MockAzureClientMockRecorder) ListAzureDevices(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureDevices", reflect.TypeOf((*MockAzureClient)(nil).ListAzureDevices), ctx, params)
}

// ListAzureFunctionApps mocks base method.
func (m *MockAzureClient) ListAzureFunctionApps(ctx context.Context, subscriptionId string) <-chan client.AzureResult[azure.FunctionApp] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureFunctionApps", ctx, subscriptionId)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.FunctionApp])
	return ret0
}

// ListAzureFunctionApps indicates an expected call of ListAzureFunctionApps.
func (mr *MockAzureClientMockRecorder) ListAzureFunctionApps(ctx, subscriptionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureFunctionApps", reflect.TypeOf((*MockAzureClient)(nil).ListAzureFunctionApps), ctx, subscriptionId)
}

// ListAzureKeyVaults mocks base method.
func (m *MockAzureClient) ListAzureKeyVaults(ctx context.Context, subscriptionId string, params query.RMParams) <-chan client.AzureResult[azure.KeyVault] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureKeyVaults", ctx, subscriptionId, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.KeyVault])
	return ret0
}

// ListAzureKeyVaults indicates an expected call of ListAzureKeyVaults.
func (mr *MockAzureClientMockRecorder) ListAzureKeyVaults(ctx, subscriptionId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureKeyVaults", reflect.TypeOf((*MockAzureClient)(nil).ListAzureKeyVaults), ctx, subscriptionId, params)
}

// ListAzureLogicApps mocks base method.
func (m *MockAzureClient) ListAzureLogicApps(ctx context.Context, subscriptionId, filter string, top int32) <-chan client.AzureResult[azure.LogicApp] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureLogicApps", ctx, subscriptionId, filter, top)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.LogicApp])
	return ret0
}

// ListAzureLogicApps indicates an expected call of ListAzureLogicApps.
func (mr *MockAzureClientMockRecorder) ListAzureLogicApps(ctx, subscriptionId, filter, top any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureLogicApps", reflect.TypeOf((*MockAzureClient)(nil).ListAzureLogicApps), ctx, subscriptionId, filter, top)
}

// ListAzureManagedClusters mocks base method.
func (m *MockAzureClient) ListAzureManagedClusters(ctx context.Context, subscriptionId string) <-chan client.AzureResult[azure.ManagedCluster] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureManagedClusters", ctx, subscriptionId)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.ManagedCluster])
	return ret0
}

// ListAzureManagedClusters indicates an expected call of ListAzureManagedClusters.
func (mr *MockAzureClientMockRecorder) ListAzureManagedClusters(ctx, subscriptionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureManagedClusters", reflect.TypeOf((*MockAzureClient)(nil).ListAzureManagedClusters), ctx, subscriptionId)
}

// ListAzureManagementGroupDescendants mocks base method.
func (m *MockAzureClient) ListAzureManagementGroupDescendants(ctx context.Context, groupId string, top int32) <-chan client.AzureResult[azure.DescendantInfo] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureManagementGroupDescendants", ctx, groupId, top)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.DescendantInfo])
	return ret0
}

// ListAzureManagementGroupDescendants indicates an expected call of ListAzureManagementGroupDescendants.
func (mr *MockAzureClientMockRecorder) ListAzureManagementGroupDescendants(ctx, groupId, top any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureManagementGroupDescendants", reflect.TypeOf((*MockAzureClient)(nil).ListAzureManagementGroupDescendants), ctx, groupId, top)
}

// ListAzureManagementGroups mocks base method.
func (m *MockAzureClient) ListAzureManagementGroups(ctx context.Context, skipToken string) <-chan client.AzureResult[azure.ManagementGroup] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureManagementGroups", ctx, skipToken)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.ManagementGroup])
	return ret0
}

// ListAzureManagementGroups indicates an expected call of ListAzureManagementGroups.
func (mr *MockAzureClientMockRecorder) ListAzureManagementGroups(ctx, skipToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureManagementGroups", reflect.TypeOf((*MockAzureClient)(nil).ListAzureManagementGroups), ctx, skipToken)
}

// ListAzureResourceGroups mocks base method.
func (m *MockAzureClient) ListAzureResourceGroups(ctx context.Context, subscriptionId string, params query.RMParams) <-chan client.AzureResult[azure.ResourceGroup] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureResourceGroups", ctx, subscriptionId, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.ResourceGroup])
	return ret0
}

// ListAzureResourceGroups indicates an expected call of ListAzureResourceGroups.
func (mr *MockAzureClientMockRecorder) ListAzureResourceGroups(ctx, subscriptionId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureResourceGroups", reflect.TypeOf((*MockAzureClient)(nil).ListAzureResourceGroups), ctx, subscriptionId, params)
}

// ListAzureStorageAccounts mocks base method.
func (m *MockAzureClient) ListAzureStorageAccounts(ctx context.Context, subscriptionId string) <-chan client.AzureResult[azure.StorageAccount] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureStorageAccounts", ctx, subscriptionId)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.StorageAccount])
	return ret0
}

// ListAzureStorageAccounts indicates an expected call of ListAzureStorageAccounts.
func (mr *MockAzureClientMockRecorder) ListAzureStorageAccounts(ctx, subscriptionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureStorageAccounts", reflect.TypeOf((*MockAzureClient)(nil).ListAzureStorageAccounts), ctx, subscriptionId)
}

// ListAzureStorageContainers mocks base method.
func (m *MockAzureClient) ListAzureStorageContainers(ctx context.Context, subscriptionId, resourceGroupName, saName, filter, includeDeleted, maxPageSize string) <-chan client.AzureResult[azure.StorageContainer] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureStorageContainers", ctx, subscriptionId, resourceGroupName, saName, filter, includeDeleted, maxPageSize)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.StorageContainer])
	return ret0
}

// ListAzureStorageContainers indicates an expected call of ListAzureStorageContainers.
func (mr *MockAzureClientMockRecorder) ListAzureStorageContainers(ctx, subscriptionId, resourceGroupName, saName, filter, includeDeleted, maxPageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureStorageContainers", reflect.TypeOf((*MockAzureClient)(nil).ListAzureStorageContainers), ctx, subscriptionId, resourceGroupName, saName, filter, includeDeleted, maxPageSize)
}

// ListAzureSubscriptions mocks base method.
func (m *MockAzureClient) ListAzureSubscriptions(ctx context.Context) <-chan client.AzureResult[azure.Subscription] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureSubscriptions", ctx)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.Subscription])
	return ret0
}

// ListAzureSubscriptions indicates an expected call of ListAzureSubscriptions.
func (mr *MockAzureClientMockRecorder) ListAzureSubscriptions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureSubscriptions", reflect.TypeOf((*MockAzureClient)(nil).ListAzureSubscriptions), ctx)
}

// ListAzureUnifiedRoleEligibilityScheduleInstances mocks base method.
func (m *MockAzureClient) ListAzureUnifiedRoleEligibilityScheduleInstances(ctx context.Context, params query.GraphParams) <-chan client.AzureResult[azure.UnifiedRoleEligibilityScheduleInstance] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureUnifiedRoleEligibilityScheduleInstances", ctx, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.UnifiedRoleEligibilityScheduleInstance])
	return ret0
}

// ListAzureUnifiedRoleEligibilityScheduleInstances indicates an expected call of ListAzureUnifiedRoleEligibilityScheduleInstances.
func (mr *MockAzureClientMockRecorder) ListAzureUnifiedRoleEligibilityScheduleInstances(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureUnifiedRoleEligibilityScheduleInstances", reflect.TypeOf((*MockAzureClient)(nil).ListAzureUnifiedRoleEligibilityScheduleInstances), ctx, params)
}

// ListAzureVMScaleSets mocks base method.
func (m *MockAzureClient) ListAzureVMScaleSets(ctx context.Context, subscriptionId string) <-chan client.AzureResult[azure.VMScaleSet] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureVMScaleSets", ctx, subscriptionId)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.VMScaleSet])
	return ret0
}

// ListAzureVMScaleSets indicates an expected call of ListAzureVMScaleSets.
func (mr *MockAzureClientMockRecorder) ListAzureVMScaleSets(ctx, subscriptionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureVMScaleSets", reflect.TypeOf((*MockAzureClient)(nil).ListAzureVMScaleSets), ctx, subscriptionId)
}

// ListAzureVirtualMachines mocks base method.
func (m *MockAzureClient) ListAzureVirtualMachines(ctx context.Context, subscriptionId string, params query.RMParams) <-chan client.AzureResult[azure.VirtualMachine] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureVirtualMachines", ctx, subscriptionId, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.VirtualMachine])
	return ret0
}

// ListAzureVirtualMachines indicates an expected call of ListAzureVirtualMachines.
func (mr *MockAzureClientMockRecorder) ListAzureVirtualMachines(ctx, subscriptionId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureVirtualMachines", reflect.TypeOf((*MockAzureClient)(nil).ListAzureVirtualMachines), ctx, subscriptionId, params)
}

// ListAzureWebApps mocks base method.
func (m *MockAzureClient) ListAzureWebApps(ctx context.Context, subscriptionId string) <-chan client.AzureResult[azure.WebApp] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureWebApps", ctx, subscriptionId)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.WebApp])
	return ret0
}

// ListAzureWebApps indicates an expected call of ListAzureWebApps.
func (mr *MockAzureClientMockRecorder) ListAzureWebApps(ctx, subscriptionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureWebApps", reflect.TypeOf((*MockAzureClient)(nil).ListAzureWebApps), ctx, subscriptionId)
}

// ListRoleAssignmentPolicies mocks base method.
func (m *MockAzureClient) ListRoleAssignmentPolicies(ctx context.Context, params query.GraphParams) <-chan client.AzureResult[azure.UnifiedRoleManagementPolicyAssignment] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoleAssignmentPolicies", ctx, params)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.UnifiedRoleManagementPolicyAssignment])
	return ret0
}

// ListRoleAssignmentPolicies indicates an expected call of ListRoleAssignmentPolicies.
func (mr *MockAzureClientMockRecorder) ListRoleAssignmentPolicies(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleAssignmentPolicies", reflect.TypeOf((*MockAzureClient)(nil).ListRoleAssignmentPolicies), ctx, params)
}

// ListRoleAssignmentsForResource mocks base method.
func (m *MockAzureClient) ListRoleAssignmentsForResource(ctx context.Context, resourceId, filter, tenantId string) <-chan client.AzureResult[azure.RoleAssignment] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoleAssignmentsForResource", ctx, resourceId, filter, tenantId)
	ret0, _ := ret[0].(<-chan client.AzureResult[azure.RoleAssignment])
	return ret0
}

// ListRoleAssignmentsForResource indicates an expected call of ListRoleAssignmentsForResource.
func (mr *MockAzureClientMockRecorder) ListRoleAssignmentsForResource(ctx, resourceId, filter, tenantId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleAssignmentsForResource", reflect.TypeOf((*MockAzureClient)(nil).ListRoleAssignmentsForResource), ctx, resourceId, filter, tenantId)
}

// TenantInfo mocks base method.
func (m *MockAzureClient) TenantInfo() azure.Tenant {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantInfo")
	ret0, _ := ret[0].(azure.Tenant)
	return ret0
}

// TenantInfo indicates an expected call of TenantInfo.
func (mr *MockAzureClientMockRecorder) TenantInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantInfo", reflect.TypeOf((*MockAzureClient)(nil).TenantInfo))
}
